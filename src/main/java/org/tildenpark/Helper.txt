class MatchEngine {
    private PriorityQueue<Order> buyOrders;
    private PriorityQueue<Order> sellOrders;
    private MessageBus messageBus;
    private Map<Integer, Order> orderMap;

    public MatchEngine(MessageBus messageBus) {
        this.buyOrders = new PriorityQueue<>(new BuyOrderComparator());
        this.sellOrders = new PriorityQueue<>(new SellOrderComparator());
        this.messageBus = messageBus;
        this.orderMap = new HashMap<>();
    }

    public void process(Message message) {
        switch (message.getMessageType()) {
            case ADD_ORDER_REQUEST:
                processAddOrder((AddOrderRequest) message);
                break;
            case CANCEL_ORDER_REQUEST:
                processCancelOrder((CancelOrderRequest) message);
                break;
            default:
                System.out.println("Invalid message type: " + message.getMessageType());
        }
        showOrderBook();
    }

    private void processAddOrder(AddOrderRequest request) {
        double price = request.getPrice();
        Order order = new Order(request.getOrderId(), request.getSide(), request.getQuantity(), price);
        orderMap.put(order.getOrderId(), order);

        if (order.getSide() == Side.BUY) {
            buyOrders.add(order);
            matchBuyOrder(order);
        } else {
            sellOrders.add(order);
            matchSellOrder(order);
        }
    }

    private void processCancelOrder(CancelOrderRequest request) {
        int orderId = request.getOrderId();
        Order order = orderMap.get(orderId);

        if (order != null) {
            orderMap.remove(orderId);
            if (order.getSide() == Side.BUY) {
                buyOrders.remove(order);
            } else {
                sellOrders.remove(order);
            }
            messageBus.publish(new CancelOrder(orderId));
        }
    }

    private void matchBuyOrder(Order buyOrder) {
        List<Order> matchedOrders = new ArrayList<>();

        while (!sellOrders.isEmpty()) {
            Order sellOrder = sellOrders.peek();
            if (sellOrder.getPrice() > buyOrder.getPrice()) {
                break; // No more matches
            }

            if (sellOrder.getQuantity() <= buyOrder.getQuantity()) {
                sellOrders.poll();
                int tradeQuantity = sellOrder.getQuantity();
                messageBus.publish(new TradeEvent(tradeQuantity, sellOrder.getPrice()));
                messageBus.publish(new OrderFullyFilled(sellOrder.getOrderId()));
                messageBus.publish(new OrderFullyFilled(buyOrder.getOrderId()));
                buyOrder.setQuantity(buyOrder.getQuantity() - tradeQuantity);
                if (buyOrder.getQuantity() == 0) {
                    return; // Buy order fully filled
                }
                matchedOrders.add(sellOrder);
            } else {
                sellOrder.setQuantity(sellOrder.getQuantity() - buyOrder.getQuantity());
                messageBus.publish(new TradeEvent(buyOrder.getQuantity(), sellOrder.getPrice()));
                messageBus.publish(new OrderPartiallyFilled(sellOrder.getOrderId(), buyOrder.getQuantity(), sellOrder.getQuantity()));
                messageBus.publish(new OrderFullyFilled(buyOrder.getOrderId()));
                buyOrder.setQuantity(0);
                return; // Buy order fully filled
            }
        }

        for (Order matchedOrder : matchedOrders) {
            sellOrders.remove(matchedOrder);
            orderMap.remove(matchedOrder.getOrderId());
        }
    }

    private void matchSellOrder(Order sellOrder) {
        List<Order> matchedOrders = new ArrayList<>();

        while (!buyOrders.isEmpty()) {
            Order buyOrder = buyOrders.peek();
            if (buyOrder.getPrice() < sellOrder.getPrice()) {
                break; // No more matches
            }

            if (buyOrder.getQuantity() <= sellOrder.getQuantity()) {
                buyOrders.poll();
                int tradeQuantity = buyOrder.getQuantity();
                messageBus.publish(new TradeEvent(tradeQuantity, buyOrder.getPrice()));
                messageBus.publish(new OrderFullyFilled(buyOrder.getOrderId()));
                messageBus.publish(new OrderFullyFilled(sellOrder.getOrderId()));
                sellOrder.setQuantity(sellOrder.getQuantity() - tradeQuantity);
                if (sellOrder.getQuantity() == 0) {
                    return; // Sell order fully filled
                }
                matchedOrders.add(buyOrder);
            } else {
                buyOrder.setQuantity(buyOrder.getQuantity() - sellOrder.getQuantity());
                messageBus.publish(new TradeEvent(sellOrder.getQuantity(), buyOrder.getPrice()));
                messageBus.publish(new OrderPartiallyFilled(buyOrder.getOrderId(), sellOrder.getQuantity(), buyOrder.getQuantity()));
                messageBus.publish(new OrderFullyFilled(sellOrder.getOrderId()));
                sellOrder.setQuantity(0);
                return; // Sell order fully filled
            }
        }

        for (Order matchedOrder : matchedOrders) {
            buyOrders.remove(matchedOrder);
            orderMap.remove(matchedOrder.getOrderId());
        }
    }

    private void showOrderBook() {
        List<Order> sortedBuyOrders = new ArrayList<>(buyOrders);
        List<Order> sortedSellOrders = new ArrayList<>(sellOrders);

        Comparator<Order> buyComparator = (Comparator<Order>) buyOrders.comparator();
        Comparator<Order> sellComparator = (Comparator<Order>) sellOrders.comparator();

        sortedBuyOrders.sort(buyComparator);
        sortedSellOrders.sort(sellComparator);

        System.out.println("--- BUY ORDERS ---");
        for (Order order : sortedBuyOrders) {
            System.out.println(order);
        }

        System.out.println("--- SELL ORDERS ---");
        for (Order order : sortedSellOrders) {
            System.out.println(order);
        }

        System.out.println("------------------");
    }
}
