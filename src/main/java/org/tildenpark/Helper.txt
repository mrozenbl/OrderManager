class MatchEngine {
    private Map<Integer, Order> orderMap;
    private PriorityQueue<Order> buyOrders;
    private PriorityQueue<Order> sellOrders;
    private MessageBus messageBus;

    public MatchEngine(MessageBus messageBus) {
        this.orderMap = new HashMap<>();
        this.buyOrders = new PriorityQueue<>(new BuyOrderComparator());
        this.sellOrders = new PriorityQueue<>(new SellOrderComparator());
        this.messageBus = messageBus;
    }

    public void process(Message message) {
        switch (message.getMessageType()) {
            case ADD_ORDER_REQUEST:
                processAddOrder((AddOrderRequest) message);
                break;
            case CANCEL_ORDER_REQUEST:
                processCancelOrder((CancelOrderRequest) message);
                break;
            default:
                System.out.println("Invalid message type: " + message.getMessageType());
        }

        showOrderBook();
    }

    private void processAddOrder(AddOrderRequest request) {
        double price = request.getPrice();
        Order order = new Order(request.getOrderId(), request.getSide(), request.getQuantity(), price);
        orderMap.put(order.getOrderId(), order);

        if (order.getSide() == Side.BUY) {
            buyOrders.add(order);
            matchBuyOrder(order);
        } else {
            sellOrders.add(order);
            matchSellOrder(order);
        }
    }

    private void processCancelOrder(CancelOrderRequest request) {
        int orderId = request.getOrderId();
        Order order = orderMap.get(orderId);

        if (order != null) {
            order.setFilled(true); // Mark the order as filled instead of removing it
            orderMap.remove(orderId);

            if (order.getSide() == Side.BUY) {
                buyOrders.remove(order);
            } else {
                sellOrders.remove(order);
            }

            messageBus.publish(new OrderFullyFilled(orderId));
        }
    }

    private void matchBuyOrder(Order buyOrder) {
        while (!sellOrders.isEmpty()) {
            Order sellOrder = sellOrders.peek();
            if (buyOrder.getPrice() >= sellOrder.getPrice()) {
                int filledQuantity = Math.min(buyOrder.getQuantity(), sellOrder.getQuantity());
                buyOrder.setQuantity(buyOrder.getQuantity() - filledQuantity);
                sellOrder.setQuantity(sellOrder.getQuantity() - filledQuantity);

                messageBus.publish(new TradeEvent(filledQuantity, sellOrder.getPrice()));
                messageBus.publish(new OrderPartiallyFilled(buyOrder.getOrderId(), filledQuantity, buyOrder.getQuantity()));
                messageBus.publish(new OrderPartiallyFilled(sellOrder.getOrderId(), filledQuantity, sellOrder.getQuantity()));

                if (sellOrder.getQuantity() == 0) {
                    sellOrders.poll();
                    orderMap.remove(sellOrder.getOrderId());
                    messageBus.publish(new OrderFullyFilled(sellOrder.getOrderId()));
                }

                if (buyOrder.getQuantity() == 0) {
                    break;
                }
            } else {
                break;
            }
        }

        if (buyOrder.getQuantity() > 0) {
            messageBus.publish(new OrderPartiallyFilled(buyOrder.getOrderId(), buyOrder.getQuantity(), 0));
        } else {
            orderMap.remove(buyOrder.getOrderId());
            messageBus.publish(new OrderFullyFilled(buyOrder.getOrderId()));
        }
    }

    private void matchSellOrder(Order sellOrder) {
        while (!buyOrders.isEmpty()) {
            Order buyOrder = buyOrders.peek();
            if (sellOrder.getPrice() <= buyOrder.getPrice()) {
                int filledQuantity = Math.min(sellOrder.getQuantity(), buyOrder.getQuantity());
                sellOrder.setQuantity(sellOrder.getQuantity() - filledQuantity);
                buyOrder.setQuantity(buyOrder.getQuantity() - filledQuantity);

                messageBus.publish(new TradeEvent(filledQuantity, sellOrder.getPrice()));
                messageBus.publish(new OrderPartiallyFilled(sellOrder.getOrderId(), filledQuantity, sellOrder.getQuantity()));
                messageBus.publish(new OrderPartiallyFilled(buyOrder.getOrderId(), filledQuantity, buyOrder.getQuantity()));

                if (buyOrder.getQuantity() == 0) {
                    buyOrders.poll();
                    orderMap.remove(buyOrder.getOrderId());
                    messageBus.publish(new OrderFullyFilled(buyOrder.getOrderId()));
                }

                if (sellOrder.getQuantity() == 0) {
                    break;
                }
            } else {
                break;
            }
        }

        if (sellOrder.getQuantity() > 0) {
            messageBus.publish(new OrderPartiallyFilled(sellOrder.getOrderId(), sellOrder.getQuantity(), 0));
        } else {
            orderMap.remove(sellOrder.getOrderId());
            messageBus.publish(new OrderFullyFilled(sellOrder.getOrderId()));
        }
    }